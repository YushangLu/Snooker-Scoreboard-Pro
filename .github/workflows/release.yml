# .github/workflows/release.yml

name: Create Release

on:
  push:
    tags:
      - 'v*.*.*'

jobs:
  build:
    name: Build on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [macos-latest, ubuntu-latest, windows-latest]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm install

      - name: Package application
        # electron-builder requires this token for some functionalities, even when not publishing directly.
        # Secrets for code signing should be configured in repository settings for this to work.
        run: npm run electron:build -- --publish never
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
          # --- Code Signing Secrets (optional but highly recommended for production) ---
          # For macOS & Windows
          # CSC_LINK: ${{ secrets.CSC_LINK }} # .p12 or .pfx certificate (base64 encoded)
          # CSC_KEY_PASSWORD: ${{ secrets.CSC_KEY_PASSWORD }} # password for the certificate
          # For macOS Notarization
          # APPLE_ID: ${{ secrets.APPLE_ID }}
          # APPLE_APP_SPECIFIC_PASSWORD: ${{ secrets.APPLE_APP_SPECIFIC_PASSWORD }}
          # APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}

      - name: Get App Name and Version
        id: get_info
        shell: pwsh
        run: |
          $packageJson = Get-Content -Raw -Path ./package.json | ConvertFrom-Json
          $appName = $packageJson.build.productName
          $appVersion = $packageJson.version
          echo "APP_NAME=$appName" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          echo "APP_VERSION=$appVersion" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append

      - name: Prepare Artifacts for Windows
        if: matrix.os == 'windows-latest'
        shell: pwsh
        run: |
          $appName = "${{ env.APP_NAME }}"
          $appVersion = "${{ env.APP_VERSION }}"
          # Create portable zip from the 'dir' output target configured in package.json
          $portableDir = "release\win-unpacked"
          $zipFileName = "$appName-Portable-v$appVersion.zip"
          # Rename the directory to something cleaner for the user before zipping
          Rename-Item -Path $portableDir -NewName $appName
          Compress-Archive -Path "$appName" -DestinationPath "release\$zipFileName"
          # List files for debugging purposes
          Get-ChildItem -Path release -Recurse

      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts-${{ matrix.os }}
          path: |
            release/*.exe
            release/*.dmg
            release/*.AppImage
            release/*.zip
            !release/builder-debug.yml
            !release/latest*.yml
          if-no-files-found: ignore


  release:
    name: Create GitHub Release
    needs: build
    runs-on: ubuntu-latest

    permissions:
      # This permission is required to create a release and upload assets.
      contents: write

    steps:
      - name: Download all build artifacts
        uses: actions/download-artifact@v4
        with:
          path: release-artifacts/
          # This will merge all artifacts from different jobs into a single directory
          merge-multiple: true

      - name: List downloaded files for debugging
        run: ls -R release-artifacts

      - name: Create Release and Upload Assets
        uses: softprops/action-gh-release@v2
        with:
          # This will upload all files from the artifacts directory
          files: release-artifacts/*
          # Create a draft release so it can be reviewed before being published
          draft: true
          # The release body can be customized as needed
          body: |
            Automated release for Snooker Scoreboard Pro.
            See your project's CHANGELOG.md for details on what's new.